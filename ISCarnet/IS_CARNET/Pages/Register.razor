@page "/register"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="login-page">
    <img src="img/logo.png" class="logo">
</div>
<button onclick="location.href = '/'" class="fixedButton">HOME</button>
@if (loginAttempt)
{
<div class="form2">
    <h1>Felicitari!</h1>
    <h1>@message</h1>
    <button onclick="location.href = '/login'" class="homeButton">LOGIN</button>
</div>
}
else
{
<div class="form2">

    <EditForm Model="@dto" OnValidSubmit="@SubmitCandidateInformation">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-sm-4"><label for="firstname">FIRST NAME</label></div>
            <div class="col-sm-8"><InputText id="firstname" @bind-Value="dto.FirstName"></InputText></div>
        </div>


        <div class="row">
            <div class="col-sm-4"><label for="lastname">LAST NAME</label></div>
            <div class="col-sm-8"><InputText id="lastname" @bind-Value="dto.LastName"></InputText></div>
        </div>

        <div class="row">
            <div class="col-sm-4"> <label for="birthdate">BIRTHDATE</label></div>
            <div class="col-sm-8"> <InputDate id="birthdate" @bind-Value="dto.BirthDate"></InputDate></div>
        </div>

        <div class="row">
            <div class="col-sm-4"> <label for="cnp">CNP</label> </div>
            <div class="col-sm-8"> <InputText id="cnp" @bind-Value="dto.CNP"></InputText></div>
        </div>

        <div class="row">
            <div class="col-sm-4"><label for="password">PASSWORD</label></div>
            <div class="col-sm-8"> <InputText type="password" id="password" @bind-Value="dto.Password"></InputText></div>
        </div>

        <div class="row">
            <div class="col-sm-4"><label for="confirmpassword">CONFIRM PASS</label></div>
            <div class="col-sm-8"><InputText type="password" id="confirmpassword" @bind-Value="dto.ConfirmPassword"></InputText></div>
        </div>

        <button type="submit">Register</button>
    </EditForm>
</div>

}


@code {
    private RegisterCandidateDTO dto = new RegisterCandidateDTO();
    string username = String.Empty;
    string message = String.Empty;
    Boolean loginAttempt = false;
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => dto.BirthDate = DateTime.Today);
    }

    async Task ShowAlert(string error)
    {
        if (error == "Register esuat!Codul Numeric Personal introdus aparinte deja altui candidat sau campul destintat confirmarii parolei nu corespunde cu parola!")
        {

            await JSRuntime.InvokeVoidAsync("createError", error);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("createSuccess", error);
        }
    }

    private async Task SubmitCandidateInformation()
    {

        HttpClient Http = new HttpClient();
        HttpContent content = new StringContent(JsonConvert.SerializeObject(dto), Encoding.UTF8, "application/json");
        HttpResponseMessage h = await Http.PostAsync("https://localhost:44379/api/CandidateRegister", content);
        if (h.IsSuccessStatusCode)
        {
            var responseJSON = h.Content.ReadAsStringAsync().Result;
            AccountDTO acc = JsonConvert.DeserializeObject<AccountDTO>(responseJSON);
            username = acc.UserName;
            message = "Username-ul dumneavoastra este: " + username;
            //NavigationManager.NavigateTo("Login");

        }
        else
        {
            message = "Register esuat!Codul Numeric Personal introdus aparinte deja altui candidat sau campul destintat confirmarii parolei nu corespunde cu parola!";
        }
        await ShowAlert(message);
        loginAttempt = true;
    }
}
